// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type ApiRouteConfig = {
  default: (req: any, res: any) => Promise<Response | void> | Response | void
  config?: {
    api?: {
      bodyParser?: boolean | { sizeLimit?: string }
      responseLimit?: string | number | boolean
      externalResolver?: boolean
    }
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    maxDuration?: number
  }
}


// Validate ../app/page.tsx
{
  const handler = {} as typeof import("../app/page.js")
  handler satisfies AppPageConfig<"/">
}





// Validate ../pages/api/auth/register.ts
{
  const handler = {} as typeof import("../pages/api/auth/register.js")
  handler satisfies ApiRouteConfig
}

// Validate ../pages/api/subscription/create-checkout.ts
{
  const handler = {} as typeof import("../pages/api/subscription/create-checkout.js")
  handler satisfies ApiRouteConfig
}

// Validate ../pages/api/subscription/manage.ts
{
  const handler = {} as typeof import("../pages/api/subscription/manage.js")
  handler satisfies ApiRouteConfig
}

// Validate ../pages/api/subscription/status.ts
{
  const handler = {} as typeof import("../pages/api/subscription/status.js")
  handler satisfies ApiRouteConfig
}

// Validate ../pages/api/webhooks/stripe.ts
{
  const handler = {} as typeof import("../pages/api/webhooks/stripe.js")
  handler satisfies ApiRouteConfig
}

// Validate ../app/layout.tsx
{
  const handler = {} as typeof import("../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
