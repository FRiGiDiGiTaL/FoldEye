// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { NextRequest } from 'next/server.js'

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}




// Validate ../../app/api/check-access/route.ts
{
  const handler = {} as typeof import("../../app/api/check-access/route.js")
  handler satisfies RouteHandlerConfig<"/api/check-access">
}

// Validate ../../app/api/create-checkout/route.ts
{
  const handler = {} as typeof import("../../app/api/create-checkout/route.js")
  handler satisfies RouteHandlerConfig<"/api/create-checkout">
}

// Validate ../../app/api/webhooks/route.ts
{
  const handler = {} as typeof import("../../app/api/webhooks/route.js")
  handler satisfies RouteHandlerConfig<"/api/webhooks">
}

// Validate ../../pages/app.tsx
{
  const handler = {} as typeof import("../../pages/app.js")
  handler satisfies PagesPageConfig
}

// Validate ../../pages/index.tsx
{
  const handler = {} as typeof import("../../pages/index.js")
  handler satisfies PagesPageConfig
}




