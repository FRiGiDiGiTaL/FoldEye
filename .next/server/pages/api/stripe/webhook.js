"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/stripe/webhook";
exports.ids = ["pages/api/stripe/webhook"];
exports.modules = {

/***/ "(api-node)/./lib/stripe.ts":
/*!***********************!*\
  !*** ./lib/stripe.ts ***!
  \***********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PLAN_DETAILS: () => (/* binding */ PLAN_DETAILS),\n/* harmony export */   STRIPE_PRICE_IDS: () => (/* binding */ STRIPE_PRICE_IDS),\n/* harmony export */   constructWebhookEvent: () => (/* binding */ constructWebhookEvent),\n/* harmony export */   createBillingPortalSession: () => (/* binding */ createBillingPortalSession),\n/* harmony export */   createCheckoutSession: () => (/* binding */ createCheckoutSession),\n/* harmony export */   createStripeCustomer: () => (/* binding */ createStripeCustomer),\n/* harmony export */   getCustomerSubscriptions: () => (/* binding */ getCustomerSubscriptions),\n/* harmony export */   getPlanTypeFromPriceId: () => (/* binding */ getPlanTypeFromPriceId),\n/* harmony export */   stripe: () => (/* binding */ stripe)\n/* harmony export */ });\n/* harmony import */ var stripe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stripe */ \"stripe\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([stripe__WEBPACK_IMPORTED_MODULE_0__]);\nstripe__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// lib/stripe.ts\n\nconst stripe = new stripe__WEBPACK_IMPORTED_MODULE_0__[\"default\"](process.env.STRIPE_SECRET_KEY, {\n    apiVersion: '2023-10-16'\n});\nconst STRIPE_PRICE_IDS = {\n    monthly: \"price_1S2RxAJf7snkBYkO64nzHzcv\",\n    yearly: \"price_1S2S2XJf7snkBYkO44L3TrvL\",\n    lifetime: \"price_1S2S3zJf7snkBYkOAnc5J1LF\"\n};\nconst PLAN_DETAILS = {\n    monthly: {\n        name: 'Monthly Plan',\n        price: 5.99,\n        interval: 'month',\n        description: 'Full access to all BookfoldAR features'\n    },\n    yearly: {\n        name: 'Annual Plan',\n        price: 19.99,\n        interval: 'year',\n        description: 'Full access + 2 months free'\n    },\n    lifetime: {\n        name: 'Lifetime Plan',\n        price: 59.99,\n        interval: null,\n        description: 'Pay once, use forever'\n    }\n};\nasync function createStripeCustomer(email, name) {\n    try {\n        const customer = await stripe.customers.create({\n            email,\n            name,\n            metadata: {\n                app: 'bookfoldar'\n            }\n        });\n        return customer;\n    } catch (error) {\n        console.error('Error creating Stripe customer:', error);\n        return null;\n    }\n}\nasync function createCheckoutSession({ customerId, priceId, successUrl, cancelUrl, metadata = {} }) {\n    try {\n        const session = await stripe.checkout.sessions.create({\n            customer: customerId,\n            payment_method_types: [\n                'card'\n            ],\n            mode: priceId === STRIPE_PRICE_IDS.lifetime ? 'payment' : 'subscription',\n            line_items: [\n                {\n                    price: priceId,\n                    quantity: 1\n                }\n            ],\n            success_url: successUrl,\n            cancel_url: cancelUrl,\n            metadata: {\n                app: 'bookfoldar',\n                ...metadata\n            },\n            allow_promotion_codes: true,\n            billing_address_collection: 'auto',\n            ...priceId !== STRIPE_PRICE_IDS.lifetime && {\n                subscription_data: {\n                    metadata: {\n                        app: 'bookfoldar',\n                        ...metadata\n                    }\n                }\n            }\n        });\n        return session;\n    } catch (error) {\n        console.error('Error creating checkout session:', error);\n        return null;\n    }\n}\nasync function createBillingPortalSession(customerId, returnUrl) {\n    try {\n        const session = await stripe.billingPortal.sessions.create({\n            customer: customerId,\n            return_url: returnUrl\n        });\n        return session;\n    } catch (error) {\n        console.error('Error creating billing portal session:', error);\n        return null;\n    }\n}\nasync function getCustomerSubscriptions(customerId) {\n    try {\n        const subscriptions = await stripe.subscriptions.list({\n            customer: customerId,\n            status: 'all',\n            expand: [\n                'data.items.data.price'\n            ]\n        });\n        return subscriptions.data;\n    } catch (error) {\n        console.error('Error getting customer subscriptions:', error);\n        return [];\n    }\n}\nfunction getPlanTypeFromPriceId(priceId) {\n    for (const [planType, id] of Object.entries(STRIPE_PRICE_IDS)){\n        if (id === priceId) {\n            return planType;\n        }\n    }\n    return null;\n}\nfunction constructWebhookEvent(payload, signature, secret) {\n    try {\n        return stripe.webhooks.constructEvent(payload, signature, secret);\n    } catch (error) {\n        console.error('Error constructing webhook event:', error);\n        return null;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/stripe.ts\n");

/***/ }),

/***/ "(api-node)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createPayment: () => (/* binding */ createPayment),\n/* harmony export */   createSubscription: () => (/* binding */ createSubscription),\n/* harmony export */   getSubscriptionByStripeId: () => (/* binding */ getSubscriptionByStripeId),\n/* harmony export */   getUserByEmail: () => (/* binding */ getUserByEmail),\n/* harmony export */   getUserByStripeCustomerId: () => (/* binding */ getUserByStripeCustomerId),\n/* harmony export */   getUserSubscriptionStatus: () => (/* binding */ getUserSubscriptionStatus),\n/* harmony export */   isEventProcessed: () => (/* binding */ isEventProcessed),\n/* harmony export */   markEventProcessed: () => (/* binding */ markEventProcessed),\n/* harmony export */   recordStripeEvent: () => (/* binding */ recordStripeEvent),\n/* harmony export */   startTrial: () => (/* binding */ startTrial),\n/* harmony export */   supabase: () => (/* binding */ supabase),\n/* harmony export */   supabaseAdmin: () => (/* binding */ supabaseAdmin),\n/* harmony export */   updatePayment: () => (/* binding */ updatePayment),\n/* harmony export */   updateSubscription: () => (/* binding */ updateSubscription),\n/* harmony export */   upsertUser: () => (/* binding */ upsertUser)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n// lib/supabase.ts\n\nconst supabaseUrl = \"https://mpcmqjxmnhlozrdmlkts.supabase.co\";\nconst supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1wY21xanhtbmhsb3pyZG1sa3RzIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTczNjk2ODEsImV4cCI6MjA3Mjk0NTY4MX0.Q3Pz8muPICb8Omrzaf247LAXP6Alx0WdbEb_0DwE9Nk\";\n// Client for server-side operations (admin)\nconst supabaseAdmin = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseServiceKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n// Client for client-side operations\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Stripe Events / Idempotency Functions\nasync function recordStripeEvent(stripeEventId, eventType, data, apiVersion) {\n    try {\n        console.log(`Recording Stripe event: ${stripeEventId} (${eventType})`);\n        const { data: result, error } = await supabaseAdmin.from('stripe_events').insert({\n            stripe_event_id: stripeEventId,\n            event_type: eventType,\n            data,\n            api_version: apiVersion,\n            processed: false\n        }).select().single();\n        if (error) {\n            // If it's a unique constraint violation, the event already exists\n            if (error.code === '23505') {\n                console.log(`Stripe event ${stripeEventId} already recorded`);\n                return false; // Event already exists\n            }\n            console.error('Error recording Stripe event:', error);\n            return false;\n        }\n        console.log(`Successfully recorded event: ${stripeEventId}`);\n        return true; // New event, proceed with processing\n    } catch (error) {\n        console.error('Error recording Stripe event:', error);\n        return false;\n    }\n}\nasync function markEventProcessed(stripeEventId) {\n    try {\n        console.log(`Marking event as processed: ${stripeEventId}`);\n        const { error } = await supabaseAdmin.from('stripe_events').update({\n            processed: true,\n            processed_at: new Date().toISOString()\n        }).eq('stripe_event_id', stripeEventId);\n        if (error) {\n            console.error('Error marking event as processed:', error);\n            return false;\n        }\n        console.log(`Successfully marked event as processed: ${stripeEventId}`);\n        return true;\n    } catch (error) {\n        console.error('Error marking event as processed:', error);\n        return false;\n    }\n}\nasync function isEventProcessed(stripeEventId) {\n    try {\n        console.log(`Checking if event is processed: ${stripeEventId}`);\n        const { data, error } = await supabaseAdmin.from('stripe_events').select('processed').eq('stripe_event_id', stripeEventId).single();\n        if (error) {\n            // If event not found, it hasn't been processed\n            if (error.code === 'PGRST116') {\n                console.log(`Event ${stripeEventId} not found in database`);\n                return false;\n            }\n            console.error('Error checking if event is processed:', error);\n            return false;\n        }\n        const isProcessed = data?.processed === true;\n        console.log(`Event ${stripeEventId} processed status: ${isProcessed}`);\n        return isProcessed;\n    } catch (error) {\n        console.error('Error checking if event is processed:', error);\n        return false;\n    }\n}\n// User Management Functions\nasync function getUserSubscriptionStatus(email) {\n    try {\n        const { data, error } = await supabaseAdmin.rpc('get_user_subscription_status', {\n            user_email: email\n        });\n        if (error) {\n            console.error('Error getting user subscription status:', error);\n            return null;\n        }\n        return data?.[0] || null;\n    } catch (error) {\n        console.error('Error calling get_user_subscription_status:', error);\n        return null;\n    }\n}\nasync function upsertUser(email, stripeCustomerId) {\n    try {\n        const { data, error } = await supabaseAdmin.rpc('upsert_user', {\n            user_email: email,\n            stripe_customer_id: stripeCustomerId\n        });\n        if (error) {\n            console.error('Error upserting user:', error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error calling upsert_user:', error);\n        return null;\n    }\n}\nasync function startTrial(email) {\n    try {\n        const { data, error } = await supabaseAdmin.rpc('start_trial', {\n            user_email: email\n        });\n        if (error) {\n            console.error('Error starting trial:', error);\n            return false;\n        }\n        return data === true;\n    } catch (error) {\n        console.error('Error calling start_trial:', error);\n        return false;\n    }\n}\nasync function getUserByEmail(email) {\n    try {\n        const { data, error } = await supabaseAdmin.from('users').select('*').eq('email', email).single();\n        if (error) {\n            console.error('Error getting user by email:', error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error getting user by email:', error);\n        return null;\n    }\n}\nasync function getUserByStripeCustomerId(customerId) {\n    try {\n        const { data, error } = await supabaseAdmin.from('users').select('*').eq('stripe_customer_id', customerId).single();\n        if (error) {\n            console.error('Error getting user by stripe customer ID:', error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error getting user by stripe customer ID:', error);\n        return null;\n    }\n}\n// Subscription Management Functions\nasync function createSubscription(subscription) {\n    try {\n        console.log('Creating subscription:', subscription);\n        const { data, error } = await supabaseAdmin.from('subscriptions').insert(subscription).select().single();\n        if (error) {\n            console.error('Error creating subscription:', error);\n            return null;\n        }\n        console.log('Successfully created subscription:', data.id);\n        return data;\n    } catch (error) {\n        console.error('Error creating subscription:', error);\n        return null;\n    }\n}\nasync function updateSubscription(stripeSubscriptionId, updates) {\n    try {\n        console.log(`Updating subscription: ${stripeSubscriptionId}`, updates);\n        const { data, error } = await supabaseAdmin.from('subscriptions').update(updates).eq('stripe_subscription_id', stripeSubscriptionId).select().single();\n        if (error) {\n            console.error('Error updating subscription:', error);\n            return null;\n        }\n        console.log('Successfully updated subscription:', data.id);\n        return data;\n    } catch (error) {\n        console.error('Error updating subscription:', error);\n        return null;\n    }\n}\nasync function getSubscriptionByStripeId(stripeSubscriptionId) {\n    try {\n        const { data, error } = await supabaseAdmin.from('subscriptions').select('*').eq('stripe_subscription_id', stripeSubscriptionId).single();\n        if (error) {\n            console.error('Error getting subscription by Stripe ID:', error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error getting subscription by Stripe ID:', error);\n        return null;\n    }\n}\n// Payment Management Functions\nasync function createPayment(payment) {\n    try {\n        console.log('Creating payment record:', payment.stripe_payment_intent_id);\n        const { data, error } = await supabaseAdmin.from('payments').insert(payment).select().single();\n        if (error) {\n            console.error('Error creating payment record:', error);\n            return null;\n        }\n        console.log('Successfully created payment record:', data.id);\n        return data;\n    } catch (error) {\n        console.error('Error creating payment record:', error);\n        return null;\n    }\n}\nasync function updatePayment(paymentIntentId, updates) {\n    try {\n        const { data, error } = await supabaseAdmin.from('payments').update(updates).eq('stripe_payment_intent_id', paymentIntentId).select().single();\n        if (error) {\n            console.error('Error updating payment:', error);\n            return null;\n        }\n        return data;\n    } catch (error) {\n        console.error('Error updating payment:', error);\n        return null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./lib/supabase.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstripe%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstripe%5Cwebhook.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstripe%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstripe%5Cwebhook.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_stripe_webhook_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./pages\\api\\stripe\\webhook.ts */ \"(api-node)/./pages/api/stripe/webhook.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_stripe_webhook_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_pages_api_stripe_webhook_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_stripe_webhook_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_pages_api_stripe_webhook_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/stripe/webhook\",\n        pathname: \"/api/stripe/webhook\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_stripe_webhook_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    relativeProjectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/stripe/webhook\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest, routerServerContext } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: [],\n                multiZoneDraftMode: Boolean(false),\n                trustHostHeader: false,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/stripe/webhook\",\n                internalRevalidate: routerServerContext == null ? void 0 : routerServerContext.revalidate,\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGc3RyaXBlJTJGd2ViaG9vayZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDc3RyaXBlJTVDd2ViaG9vay50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBdUQ7QUFDQztBQUN1QztBQUNyQztBQUMxRDtBQUM2RDtBQUNXO0FBQ0Y7QUFDdEU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLHlEQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyx5REFBUTtBQUNwQztBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLGFBQWEsT0FBb0MsSUFBSSxDQUFFO0FBQ3ZELHdCQUF3QixNQUF1QztBQUMvRCxDQUFDO0FBQ007QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsS0FBcUIsRUFBRSxFQUUxQjtBQUNMO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSx3REFBd0Q7QUFDcEU7QUFDQTtBQUNBLHVCQUF1Qiw0RUFBUztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw2Q0FBNkMsRUFBNkM7QUFDMUYsNENBQTRDLEtBQXdDO0FBQ3BGLGlDQUFpQyxLQUFvQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUsZ0ZBQWM7QUFDL0UsK0RBQStELHlDQUF5QztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRLEVBQUUsTUFBTTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGtCQUFrQjtBQUNsQix1Q0FBdUMsUUFBUSxFQUFFLFFBQVE7QUFDekQ7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1YsNkVBQTZFLGdGQUFjO0FBQzNGLGlDQUFpQyxRQUFRLEVBQUUsUUFBUTtBQUNuRCwwQkFBMEIsdUVBQVE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxxRUFBUztBQUNqQixNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2VuZEVycm9yIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvYXBpLXV0aWxzXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzXFxcXGFwaVxcXFxzdHJpcGVcXFxcd2ViaG9vay50c1wiO1xuaW1wb3J0IHsgZ2V0VHJhY2VyLCBTcGFuS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi90cmFjZS90cmFjZXJcIjtcbmltcG9ydCB7IEJhc2VTZXJ2ZXJTcGFuIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3RyYWNlL2NvbnN0YW50c1wiO1xuLy8gUmUtZXhwb3J0IHRoZSBoYW5kbGVyIChzaG91bGQgYmUgdGhlIGRlZmF1bHQgZXhwb3J0KS5cbmV4cG9ydCBkZWZhdWx0IGhvaXN0KHVzZXJsYW5kLCAnZGVmYXVsdCcpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgJ2NvbmZpZycpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9zdHJpcGUvd2ViaG9va1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3N0cmlwZS93ZWJob29rXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmQsXG4gICAgZGlzdERpcjogcHJvY2Vzcy5lbnYuX19ORVhUX1JFTEFUSVZFX0RJU1RfRElSIHx8ICcnLFxuICAgIHJlbGF0aXZlUHJvamVjdERpcjogcHJvY2Vzcy5lbnYuX19ORVhUX1JFTEFUSVZFX1BST0pFQ1RfRElSIHx8ICcnXG59KTtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoYW5kbGVyKHJlcSwgcmVzLCBjdHgpIHtcbiAgICBsZXQgc3JjUGFnZSA9IFwiL2FwaS9zdHJpcGUvd2ViaG9va1wiO1xuICAgIC8vIHR1cmJvcGFjayBkb2Vzbid0IG5vcm1hbGl6ZSBgL2luZGV4YCBpbiB0aGUgcGFnZSBuYW1lXG4gICAgLy8gc28gd2UgbmVlZCB0byB0byBwcm9jZXNzIGR5bmFtaWMgcm91dGVzIHByb3Blcmx5XG4gICAgLy8gVE9ETzogZml4IHR1cmJvcGFjayBwcm92aWRpbmcgZGlmZmVyaW5nIHZhbHVlIGZyb20gd2VicGFja1xuICAgIGlmIChwcm9jZXNzLmVudi5UVVJCT1BBQ0spIHtcbiAgICAgICAgc3JjUGFnZSA9IHNyY1BhZ2UucmVwbGFjZSgvXFwvaW5kZXgkLywgJycpIHx8ICcvJztcbiAgICB9XG4gICAgY29uc3QgcHJlcGFyZVJlc3VsdCA9IGF3YWl0IHJvdXRlTW9kdWxlLnByZXBhcmUocmVxLCByZXMsIHtcbiAgICAgICAgc3JjUGFnZVxuICAgIH0pO1xuICAgIGlmICghcHJlcGFyZVJlc3VsdCkge1xuICAgICAgICByZXMuc3RhdHVzQ29kZSA9IDQwMDtcbiAgICAgICAgcmVzLmVuZCgnQmFkIFJlcXVlc3QnKTtcbiAgICAgICAgY3R4LndhaXRVbnRpbCA9PSBudWxsID8gdm9pZCAwIDogY3R4LndhaXRVbnRpbC5jYWxsKGN0eCwgUHJvbWlzZS5yZXNvbHZlKCkpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHsgcXVlcnksIHBhcmFtcywgcHJlcmVuZGVyTWFuaWZlc3QsIHJvdXRlclNlcnZlckNvbnRleHQgfSA9IHByZXBhcmVSZXN1bHQ7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbWV0aG9kID0gcmVxLm1ldGhvZCB8fCAnR0VUJztcbiAgICAgICAgY29uc3QgdHJhY2VyID0gZ2V0VHJhY2VyKCk7XG4gICAgICAgIGNvbnN0IGFjdGl2ZVNwYW4gPSB0cmFjZXIuZ2V0QWN0aXZlU2NvcGVTcGFuKCk7XG4gICAgICAgIGNvbnN0IG9uUmVxdWVzdEVycm9yID0gcm91dGVNb2R1bGUuaW5zdHJ1bWVudGF0aW9uT25SZXF1ZXN0RXJyb3IuYmluZChyb3V0ZU1vZHVsZSk7XG4gICAgICAgIGNvbnN0IGludm9rZVJvdXRlTW9kdWxlID0gYXN5bmMgKHNwYW4pPT5yb3V0ZU1vZHVsZS5yZW5kZXIocmVxLCByZXMsIHtcbiAgICAgICAgICAgICAgICBxdWVyeToge1xuICAgICAgICAgICAgICAgICAgICAuLi5xdWVyeSxcbiAgICAgICAgICAgICAgICAgICAgLi4ucGFyYW1zXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgYWxsb3dlZFJldmFsaWRhdGVIZWFkZXJLZXlzOiBwcm9jZXNzLmVudi5fX05FWFRfQUxMT1dFRF9SRVZBTElEQVRFX0hFQURFUlMsXG4gICAgICAgICAgICAgICAgbXVsdGlab25lRHJhZnRNb2RlOiBCb29sZWFuKHByb2Nlc3MuZW52Ll9fTkVYVF9NVUxUSV9aT05FX0RSQUZUX01PREUpLFxuICAgICAgICAgICAgICAgIHRydXN0SG9zdEhlYWRlcjogcHJvY2Vzcy5lbnYuX19ORVhUX1RSVVNUX0hPU1RfSEVBREVSLFxuICAgICAgICAgICAgICAgIC8vIFRPRE86IGdldCB0aGlzIGZyb20gZnJvbSBydW50aW1lIGVudiBzbyBtYW5pZmVzdFxuICAgICAgICAgICAgICAgIC8vIGRvZXNuJ3QgbmVlZCB0byBsb2FkXG4gICAgICAgICAgICAgICAgcHJldmlld1Byb3BzOiBwcmVyZW5kZXJNYW5pZmVzdC5wcmV2aWV3LFxuICAgICAgICAgICAgICAgIHByb3BhZ2F0ZUVycm9yOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkZXY6IHJvdXRlTW9kdWxlLmlzRGV2LFxuICAgICAgICAgICAgICAgIHBhZ2U6IFwiL2FwaS9zdHJpcGUvd2ViaG9va1wiLFxuICAgICAgICAgICAgICAgIGludGVybmFsUmV2YWxpZGF0ZTogcm91dGVyU2VydmVyQ29udGV4dCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyU2VydmVyQ29udGV4dC5yZXZhbGlkYXRlLFxuICAgICAgICAgICAgICAgIG9uRXJyb3I6ICguLi5hcmdzKT0+b25SZXF1ZXN0RXJyb3IocmVxLCAuLi5hcmdzKVxuICAgICAgICAgICAgfSkuZmluYWxseSgoKT0+e1xuICAgICAgICAgICAgICAgIGlmICghc3BhbikgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHNwYW4uc2V0QXR0cmlidXRlcyh7XG4gICAgICAgICAgICAgICAgICAgICdodHRwLnN0YXR1c19jb2RlJzogcmVzLnN0YXR1c0NvZGUsXG4gICAgICAgICAgICAgICAgICAgICduZXh0LnJzYyc6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm9vdFNwYW5BdHRyaWJ1dGVzID0gdHJhY2VyLmdldFJvb3RTcGFuQXR0cmlidXRlcygpO1xuICAgICAgICAgICAgICAgIC8vIFdlIHdlcmUgdW5hYmxlIHRvIGdldCBhdHRyaWJ1dGVzLCBwcm9iYWJseSBPVEVMIGlzIG5vdCBlbmFibGVkXG4gICAgICAgICAgICAgICAgaWYgKCFyb290U3BhbkF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocm9vdFNwYW5BdHRyaWJ1dGVzLmdldCgnbmV4dC5zcGFuX3R5cGUnKSAhPT0gQmFzZVNlcnZlclNwYW4uaGFuZGxlUmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYFVuZXhwZWN0ZWQgcm9vdCBzcGFuIHR5cGUgJyR7cm9vdFNwYW5BdHRyaWJ1dGVzLmdldCgnbmV4dC5zcGFuX3R5cGUnKX0nLiBQbGVhc2UgcmVwb3J0IHRoaXMgTmV4dC5qcyBpc3N1ZSBodHRwczovL2dpdGh1Yi5jb20vdmVyY2VsL25leHQuanNgKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByb3V0ZSA9IHJvb3RTcGFuQXR0cmlidXRlcy5nZXQoJ25leHQucm91dGUnKTtcbiAgICAgICAgICAgICAgICBpZiAocm91dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGAke21ldGhvZH0gJHtyb3V0ZX1gO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnNldEF0dHJpYnV0ZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ25leHQucm91dGUnOiByb3V0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdodHRwLnJvdXRlJzogcm91dGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAnbmV4dC5zcGFuX25hbWUnOiBuYW1lXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBzcGFuLnVwZGF0ZU5hbWUobmFtZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbi51cGRhdGVOYW1lKGAke21ldGhvZH0gJHtyZXEudXJsfWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyBUT0RPOiBhY3RpdmVTcGFuIGNvZGUgcGF0aCBpcyBmb3Igd2hlbiB3cmFwcGVkIGJ5XG4gICAgICAgIC8vIG5leHQtc2VydmVyIGNhbiBiZSByZW1vdmVkIHdoZW4gdGhpcyBpcyBubyBsb25nZXIgdXNlZFxuICAgICAgICBpZiAoYWN0aXZlU3Bhbikge1xuICAgICAgICAgICAgYXdhaXQgaW52b2tlUm91dGVNb2R1bGUoYWN0aXZlU3Bhbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhd2FpdCB0cmFjZXIud2l0aFByb3BhZ2F0ZWRDb250ZXh0KHJlcS5oZWFkZXJzLCAoKT0+dHJhY2VyLnRyYWNlKEJhc2VTZXJ2ZXJTcGFuLmhhbmRsZVJlcXVlc3QsIHtcbiAgICAgICAgICAgICAgICAgICAgc3Bhbk5hbWU6IGAke21ldGhvZH0gJHtyZXEudXJsfWAsXG4gICAgICAgICAgICAgICAgICAgIGtpbmQ6IFNwYW5LaW5kLlNFUlZFUixcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2h0dHAubWV0aG9kJzogbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2h0dHAudGFyZ2V0JzogcmVxLnVybFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSwgaW52b2tlUm91dGVNb2R1bGUpKTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAvLyB3ZSByZS10aHJvdyBpbiBkZXYgdG8gc2hvdyB0aGUgZXJyb3Igb3ZlcmxheVxuICAgICAgICBpZiAocm91dGVNb2R1bGUuaXNEZXYpIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIGlzIHRlY2huaWNhbGx5IGFuIGludmFyaWFudCBhcyBlcnJvciBoYW5kbGluZ1xuICAgICAgICAvLyBzaG91bGQgYmUgZG9uZSBpbnNpZGUgb2YgYXBpLXJlc29sdmVyIG9uRXJyb3JcbiAgICAgICAgc2VuZEVycm9yKHJlcywgNTAwLCAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyk7XG4gICAgfSBmaW5hbGx5e1xuICAgICAgICAvLyBXZSBkb24ndCBhbGxvdyBhbnkgd2FpdFVudGlsIHdvcmsgaW4gcGFnZXMgQVBJIHJvdXRlcyBjdXJyZW50bHlcbiAgICAgICAgLy8gc28gaWYgY2FsbGJhY2sgaXMgcHJlc2VudCByZXR1cm4gd2l0aCByZXNvbHZlZCBwcm9taXNlIHNpbmNlIG5vXG4gICAgICAgIC8vIHBlbmRpbmcgd29ya1xuICAgICAgICBjdHgud2FpdFVudGlsID09IG51bGwgPyB2b2lkIDAgOiBjdHgud2FpdFVudGlsLmNhbGwoY3R4LCBQcm9taXNlLnJlc29sdmUoKSk7XG4gICAgfVxufVxuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstripe%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstripe%5Cwebhook.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/stripe/webhook.ts":
/*!*************************************!*\
  !*** ./pages/api/stripe/webhook.ts ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_stripe__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/stripe */ \"(api-node)/./lib/stripe.ts\");\n/* harmony import */ var _lib_supabase__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/supabase */ \"(api-node)/./lib/supabase.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_stripe__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_stripe__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/stripe/webhook.ts\n\n\n// Disable body parsing for webhook\nconst config = {\n    api: {\n        bodyParser: false\n    }\n};\n// Helper to read raw body\nasync function getRawBody(req) {\n    const chunks = [];\n    return new Promise((resolve, reject)=>{\n        req.on('data', (chunk)=>{\n            chunks.push(chunk);\n        });\n        req.on('end', ()=>{\n            resolve(Buffer.concat(chunks));\n        });\n        req.on('error', (error)=>{\n            reject(error);\n        });\n    });\n}\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            error: 'Method not allowed'\n        });\n    }\n    const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n    if (!webhookSecret) {\n        console.error('STRIPE_WEBHOOK_SECRET is not set');\n        return res.status(500).json({\n            error: 'Webhook secret not configured'\n        });\n    }\n    try {\n        const rawBody = await getRawBody(req);\n        const signature = req.headers['stripe-signature'];\n        if (!signature) {\n            return res.status(400).json({\n                error: 'No signature provided'\n            });\n        }\n        // Construct the webhook event\n        const event = (0,_lib_stripe__WEBPACK_IMPORTED_MODULE_0__.constructWebhookEvent)(rawBody, signature, webhookSecret);\n        if (!event) {\n            return res.status(400).json({\n                error: 'Invalid signature'\n            });\n        }\n        console.log(`Received Stripe webhook: ${event.type} (${event.id})`);\n        // Check if event already processed (idempotency)\n        const isAlreadyProcessed = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.isEventProcessed)(event.id);\n        if (isAlreadyProcessed) {\n            console.log(`Event ${event.id} already processed, skipping`);\n            return res.status(200).json({\n                received: true,\n                skipped: true\n            });\n        }\n        // Record the event\n        const shouldProcess = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.recordStripeEvent)(event.id, event.type, event.data.object, event.api_version || undefined);\n        if (!shouldProcess) {\n            console.log(`Event ${event.id} already being processed`);\n            return res.status(200).json({\n                received: true,\n                duplicate: true\n            });\n        }\n        // Process the event\n        let processed = false;\n        try {\n            switch(event.type){\n                case 'checkout.session.completed':\n                    await handleCheckoutSessionCompleted(event.data.object);\n                    processed = true;\n                    break;\n                case 'customer.subscription.created':\n                    await handleSubscriptionCreated(event.data.object);\n                    processed = true;\n                    break;\n                case 'customer.subscription.updated':\n                    await handleSubscriptionUpdated(event.data.object);\n                    processed = true;\n                    break;\n                case 'customer.subscription.deleted':\n                    await handleSubscriptionDeleted(event.data.object);\n                    processed = true;\n                    break;\n                case 'invoice.payment_succeeded':\n                    await handlePaymentSucceeded(event.data.object);\n                    processed = true;\n                    break;\n                case 'invoice.payment_failed':\n                    await handlePaymentFailed(event.data.object);\n                    processed = true;\n                    break;\n                case 'payment_intent.succeeded':\n                    await handlePaymentIntentSucceeded(event.data.object);\n                    processed = true;\n                    break;\n                default:\n                    console.log(`Unhandled event type: ${event.type}`);\n                    processed = true; // Mark as processed even if unhandled\n                    break;\n            }\n        } catch (error) {\n            console.error(`Error processing webhook event ${event.id}:`, error);\n            // Don't mark as processed if there was an error\n            return res.status(500).json({\n                error: 'Event processing failed'\n            });\n        }\n        // Mark event as processed\n        if (processed) {\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.markEventProcessed)(event.id);\n            console.log(`Event ${event.id} successfully processed and marked complete`);\n        }\n        res.status(200).json({\n            received: true,\n            processed: true\n        });\n    } catch (error) {\n        console.error('Webhook handler error:', error);\n        res.status(400).json({\n            error: 'Webhook processing failed'\n        });\n    }\n}\nasync function handleCheckoutSessionCompleted(session) {\n    console.log(`Checkout session completed: ${session.id}`);\n    try {\n        const customerId = session.customer;\n        const user = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getUserByStripeCustomerId)(customerId);\n        if (!user) {\n            console.error(`User not found for customer: ${customerId}`);\n            return;\n        }\n        // Handle subscription checkout\n        if (session.mode === 'subscription' && session.subscription) {\n            console.log(`Subscription created via checkout: ${session.subscription}`);\n        // Subscription will be handled by customer.subscription.created\n        }\n        // Handle one-time payment (lifetime plan)\n        if (session.mode === 'payment') {\n            const lineItems = session.line_items?.data?.[0];\n            if (lineItems?.price?.id) {\n                const planType = (0,_lib_stripe__WEBPACK_IMPORTED_MODULE_0__.getPlanTypeFromPriceId)(lineItems.price.id);\n                if (planType === 'lifetime') {\n                    await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createSubscription)({\n                        user_id: user.id,\n                        stripe_price_id: lineItems.price.id,\n                        status: 'active',\n                        plan_type: 'lifetime',\n                        current_period_start: new Date().toISOString(),\n                        current_period_end: new Date(Date.now() + 50 * 365 * 24 * 60 * 60 * 1000).toISOString(),\n                        cancel_at_period_end: false,\n                        metadata: {\n                            stripe_checkout_session_id: session.id\n                        }\n                    });\n                    console.log(`Lifetime subscription created for user: ${user.email}`);\n                }\n            }\n        }\n    } catch (error) {\n        console.error('Error handling checkout session completed:', error);\n        throw error;\n    }\n}\nasync function handleSubscriptionCreated(subscription) {\n    console.log(`Subscription created: ${subscription.id}`);\n    try {\n        const customerId = subscription.customer;\n        const user = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getUserByStripeCustomerId)(customerId);\n        if (!user) {\n            console.error(`User not found for customer: ${customerId}`);\n            return;\n        }\n        const priceId = subscription.items.data[0]?.price?.id;\n        if (!priceId) {\n            console.error(`No price ID found for subscription: ${subscription.id}`);\n            return;\n        }\n        const planType = (0,_lib_stripe__WEBPACK_IMPORTED_MODULE_0__.getPlanTypeFromPriceId)(priceId);\n        if (!planType) {\n            console.error(`Unknown price ID: ${priceId}`);\n            return;\n        }\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createSubscription)({\n            user_id: user.id,\n            stripe_subscription_id: subscription.id,\n            stripe_price_id: priceId,\n            status: subscription.status,\n            plan_type: planType,\n            current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),\n            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),\n            cancel_at_period_end: subscription.cancel_at_period_end,\n            metadata: {\n                stripe_subscription_id: subscription.id\n            }\n        });\n        console.log(`Subscription record created for user: ${user.email}, plan: ${planType}`);\n    } catch (error) {\n        console.error('Error handling subscription created:', error);\n        throw error;\n    }\n}\nasync function handleSubscriptionUpdated(subscription) {\n    console.log(`Subscription updated: ${subscription.id}`);\n    try {\n        const updateData = {\n            status: subscription.status,\n            current_period_start: new Date(subscription.current_period_start * 1000).toISOString(),\n            current_period_end: new Date(subscription.current_period_end * 1000).toISOString(),\n            cancel_at_period_end: subscription.cancel_at_period_end\n        };\n        if (subscription.canceled_at) {\n            updateData.canceled_at = new Date(subscription.canceled_at * 1000).toISOString();\n        }\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSubscription)(subscription.id, updateData);\n        console.log(`Subscription updated in database: ${subscription.id}`);\n    } catch (error) {\n        console.error('Error handling subscription updated:', error);\n        throw error;\n    }\n}\nasync function handleSubscriptionDeleted(subscription) {\n    console.log(`Subscription deleted: ${subscription.id}`);\n    try {\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.updateSubscription)(subscription.id, {\n            status: 'canceled',\n            canceled_at: new Date().toISOString()\n        });\n        console.log(`Subscription marked as canceled in database: ${subscription.id}`);\n    } catch (error) {\n        console.error('Error handling subscription deleted:', error);\n        throw error;\n    }\n}\nasync function handlePaymentSucceeded(invoice) {\n    console.log(`Payment succeeded: ${invoice.id}`);\n    try {\n        const customerId = invoice.customer;\n        const user = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getUserByStripeCustomerId)(customerId);\n        if (!user) {\n            console.error(`User not found for customer: ${customerId}`);\n            return;\n        }\n        if (invoice.payment_intent) {\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createPayment)({\n                user_id: user.id,\n                stripe_payment_intent_id: invoice.payment_intent,\n                amount: invoice.amount_paid,\n                currency: invoice.currency,\n                status: 'succeeded',\n                metadata: {\n                    invoice_id: invoice.id,\n                    subscription_id: invoice.subscription || null\n                }\n            });\n        }\n        console.log(`Payment record created for user: ${user.email}`);\n    } catch (error) {\n        console.error('Error handling payment succeeded:', error);\n        throw error;\n    }\n}\nasync function handlePaymentFailed(invoice) {\n    console.log(`Payment failed: ${invoice.id}`);\n    try {\n        const customerId = invoice.customer;\n        if (!customerId) {\n            console.log(`No customer ID in invoice ${invoice.id} - likely a test event`);\n            return;\n        }\n        const user = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getUserByStripeCustomerId)(customerId);\n        if (!user) {\n            console.log(`User not found for customer: ${customerId} - may be a test customer`);\n            return;\n        }\n        if (invoice.payment_intent) {\n            await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createPayment)({\n                user_id: user.id,\n                stripe_payment_intent_id: invoice.payment_intent,\n                amount: invoice.amount_due,\n                currency: invoice.currency,\n                status: 'failed',\n                metadata: {\n                    invoice_id: invoice.id,\n                    subscription_id: invoice.subscription || null,\n                    failure_reason: 'Payment failed'\n                }\n            });\n        }\n        console.log(`Failed payment record created for user: ${user.email}`);\n    } catch (error) {\n        console.error('Error handling payment failed:', error);\n        throw error;\n    }\n}\nasync function handlePaymentIntentSucceeded(paymentIntent) {\n    console.log(`Payment intent succeeded: ${paymentIntent.id}`);\n    try {\n        const customerId = paymentIntent.customer;\n        if (!customerId) return;\n        const user = await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.getUserByStripeCustomerId)(customerId);\n        if (!user) {\n            console.error(`User not found for customer: ${customerId}`);\n            return;\n        }\n        await (0,_lib_supabase__WEBPACK_IMPORTED_MODULE_1__.createPayment)({\n            user_id: user.id,\n            stripe_payment_intent_id: paymentIntent.id,\n            amount: paymentIntent.amount,\n            currency: paymentIntent.currency,\n            status: 'succeeded',\n            metadata: {\n                payment_method: paymentIntent.payment_method || null\n            }\n        });\n        console.log(`Payment intent record created for user: ${user.email}`);\n    } catch (error) {\n        console.error('Error handling payment intent succeeded:', error);\n        throw error;\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/stripe/webhook.ts\n");

/***/ }),

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "stripe":
/*!*************************!*\
  !*** external "stripe" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("stripe");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fstripe%2Fwebhook&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cstripe%5Cwebhook.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();